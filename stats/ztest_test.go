package stats_test

import (
	"math"
	"testing"

	"github.com/HazelnutParadise/insyra"
	"github.com/HazelnutParadise/insyra/stats"
)

type testCase struct {
	data         []float64
	n            int
	mu           float64
	sigma        float64
	alternative  stats.AlternativeHypothesis
	expectZ      float64
	expectP      float64
	expectCI     [2]float64
	expectEffect float64
}

type twoSampleTestCase struct {
	data1        []float64
	data2        []float64
	sigma1       float64
	sigma2       float64
	alternative  stats.AlternativeHypothesis
	expectZ      float64
	expectP      float64
	expectCI     [2]float64
	expectEffect float64
}

func TestSingleSampleZTest(t *testing.T) {
	tests := []testCase{
		{[]float64{56.96714153011233, 50.61735698828815, 58.47688538100692, 67.23029856408026, 49.658466252766644, 49.6586304305082, 67.79212815507391, 59.67434729152909, 47.30525614065048, 57.42560043585965}, 10, 50, 10, stats.TwoSided, 2.0493, 0.0404, [2]float64{50.2827, 62.6786}, 0.6481},
		{[]float64{47.365823071875376, 47.34270246429743, 54.41962271566034, 32.86719755342202, 34.75082167486967, 46.37712470759027, 41.87168879665576, 55.142473325952736, 42.91975924478789, 37.87696298664709, 66.65648768921554, 49.74223699513465, 52.67528204687924, 37.75251813786544, 46.556172754748175}, 15, 50, 10, stats.Greater, -1.4377, 0.9247, [2]float64{41.2272, math.Inf(1)}, 0.3712},
		{[]float64{53.10922589709866, 40.490064225776976, 55.75698018345672, 45.99361310081195, 49.083062502067236, 45.98293387770603, 70.52278184508938, 51.86502775262066, 41.422890710440996, 60.225449121031886, 39.791563500289776, 54.08863595004755, 32.403298761202244, 38.71813951101569, 53.96861235869123, 59.38466579995411, 53.7136828118997, 50.843517176117594, 48.98896304410711, 37.214780096325725}, 20, 50, 10, stats.Less, -0.3674, 0.3566, [2]float64{-math.Inf(1), 53.5610}, 0.0822},
		{[]float64{44.801557916052914, 47.393612290402125, 62.57122226218915, 55.43618289568462, 34.36959844637266, 55.24083969394795, 48.149177195836835, 45.23077999694041, 58.11676288840868, 62.30999522495951, 61.31280119116199, 43.607824767773614, 48.907876241487855, 55.31263431403564, 61.75545127122359, 47.2082576215471, 50.14341023336183, 40.93665025993972, 40.037933759193294, 60.125258223941984, 65.56240028570824, 51.27989878419666, 62.03532897892024, 55.61636025047634, 45.54880245394876}, 25, 50, 10, stats.TwoSided, 1.0602, 0.2890, [2]float64{48.2005, 56.0404}, 0.2120},
		{[]float64{55.61395605508414, 67.38036566465969, 51.64173960890049, 67.64643655814007, 25.802548959102555, 60.21902504375224, 52.870470682381715, 49.009926495341325, 52.91760776535502, 32.124310853991076, 49.80328112162488, 55.57112571511746, 66.77894044741517, 46.81729781726352, 43.91506397106812, 46.982429564154636, 61.15402117702074, 55.287511096596845, 46.70239796232961, 57.13267433113356, 52.9707754934804, 61.68644990532889, 44.979469061226474, 48.723378534022316, 48.078918468678424, 37.364850518678814, 54.96120277064576, 54.610552721798896, 52.05113456642461, 49.65412866624853}, 30, 50, 10, stats.Greater, 0.9211, 0.1785, [2]float64{48.1033, math.Inf(1)}, 0.1682},
		{[]float64{37.84629257949586, 47.79354677234641, 48.572854834732304, 43.97722730778381, 50.387142883339905, 56.040508568145384, 70.8618590121053, 53.74577812831839, 54.57550390722764, 51.25554084233833, 32.812287847009586, 51.73486124550783, 52.60230209941027, 76.63242112485287, 50.076390352188774, 55.015473423336125, 51.65288230294757, 40.31321962380468, 63.42822814515021, 59.519330326867745, 59.910319470430466, 42.906125452052606, 66.02794310936099, 37.98148937207719, 57.868570938002705, 73.90455625809979, 42.09463674869312, 46.33702270397228, 52.99651365087641, 46.96524345883801, 36.493365689338674, 52.68562974806027, 41.37696286273895, 56.73592430635182, 42.80575765766197}, 35, 50, 10, stats.Less, 0.9455, 0.8278, [2]float64{-math.Inf(1), 54.9110}, 0.1598},
		{[]float64{67.4993440501754, 44.16746707663763, 48.77938483794324, 60.135172173696695, 39.69135683566045, 54.27459934604129, 65.07142754282428, 35.92516765438772, 53.84633858532304, 54.598827942484235, 59.8182287177731, 39.63049289121918, 38.795433869157236, 57.21941565616898, 54.96984673233186, 54.504928503458764, 55.46448209496975, 45.19975278421509, 54.322536971610035, 54.93072473298681, 44.85648581973632, 70.65774511144757, 56.73832920911788, 40.08696502797351, 58.5655360863383, 42.253183297726785, 59.87084603742452, 63.58595579007404, 43.7931768164829, 61.63376129244322, 56.12780926936498, 60.2206015999449, 70.96792982653947, 49.54611883997129, 44.4626383564251, 43.10485570374477, 43.841897150345616, 51.228982905858956, 55.41151974816644, 54.766907993300194}, 40, 50, 10, stats.TwoSided, 1.7482, 0.0804, [2]float64{49.6652, 55.8631}, 0.2764},
		{[]float64{60.27183249036024, 52.13001891877907, 66.53534077157317, 49.35343166762044, 79.20169166589619, 58.25667347765006, 43.42842443583717, 41.29107501938888, 56.824724152431855, 49.76537214674149, 59.14000494092092, 56.73237624573545, 51.271710873431275, 43.532062819315954, 36.851527753141355, 47.53485047932979, 60.56398794323472, 54.14093744130204, 39.542612212880115, 53.73180925851182, 55.85317379728837, 43.16142563798867, 53.53725105945528, 52.58208718446, 40.57029702169377, 55.577873603482836, 57.60784526368234, 62.830512431752766, 62.53802052034903, 38.22330632042909, 42.62174960084877, 57.1503526720866, 57.13785950912209, 57.150476863060476, 90.52731490654722, 57.70890510693167, 63.35565640180599, 61.54001763493203, 58.51391251305798, 48.84730755359654, 59.589692204932675, 44.27174785462428, 49.63181393259991, 47.14636452170897, 52.81874139386323, 75.14658566673509, 33.32734807408252, 58.86260190374514, 35.87284128810349, 47.280681342105666}, 50, 50, 10, stats.Greater, 2.5609, 0.0052, [2]float64{50.8499, math.Inf(1)}, 0.3622},
		{[]float64{32.47912200477498, 50.482149049644164, 57.883172064845766, 54.809918677350325, 45.77300480179406, 49.918777496427246, 47.06999065341167, 46.106352430557884, 60.496020970210246, 55.57015485965047, 45.070904047393455, 60.995998754332504, 55.072995208766095, 60.1286211883896, 58.29628841923612, 43.710049890779274, 46.39818959803031, 59.472936051232615, 58.10370265433465, 51.79098406035852, 53.17327383308782, 64.77664895788425, 46.0842861116417, 57.470973811700375, 49.97807347566106, 49.8231879677278, 62.9877685198719, 60.2541634898803, 60.135096360006386, 65.05478807154329, 52.21003841632759, 58.81952971294964, 48.89733243406544, 55.24166352488442, 50.698569456323156, 52.96995964992718, 57.95157025436914, 43.81779316766527, 72.9238727568546, 41.93982618500298, 39.85811387212268, 63.581108735000676, 59.91662693962936, 58.24119817052155, 58.2834550926428, 51.87753227153085, 43.02745628514168, 52.75804558193726, 45.22838288487888, 61.75119733417751, 50.52942618497861, 43.745028032074885, 48.78614158347007, 56.12931454275624, 46.36275447196025, 43.77779604433569, 54.436872114919126, 54.44966571108723, 46.9305682462887, 47.289616943816775, 54.32049937357636, 37.51915658502676, 37.92536225623445, 44.81555778747564, 49.86552848288153, 55.10907565598005, 66.75356216949552, 60.576596232020194, 50.40061470036573, 51.80983792097311, 41.97470635362191, 51.8148686400761, 49.11341361079862, 55.227185603380896, 43.727690564476774, 57.193465142411725, 67.32738913002578, 50.91239851543143, 56.01711722098941, 58.90143991711113, 47.987795281141636, 54.24092481810417, 52.12592400781795, 52.97676098548832, 44.26990216144534, 52.245101742589426, 56.979982912454496, 66.51143607795042, 61.59270826085207, 73.53182457511556, 44.326524371119504, 60.723206367206785, 53.83342005738352, 73.89802933217672, 43.91701714644849, 43.602781578192236, 46.00607354555978, 30.76104275690193, 46.74244978319239, 44.40867338446302}, 100, 50, 10, stats.TwoSided, 2.6379, 0.0083, [2]float64{50.6779, 54.5978}, 0.2638},
	}

	for i, test := range tests {
		dl := insyra.NewDataList(test.data)
		result := stats.SingleSampleZTest(dl, test.mu, test.sigma, test.alternative, 0.95)

		if !floatAlmostEqual(result.Statistic, test.expectZ, 0.01) {
			t.Errorf("case %d: Z mismatch, got %f, want %f", i, result.Statistic, test.expectZ)
		}
		if !floatAlmostEqual(result.PValue, test.expectP, 0.01) {
			t.Errorf("case %d: P mismatch, got %f, want %f", i, result.PValue, test.expectP)
		}
		// 更寬容的比較方式：Inf 忽略比較，其他用 1e-4 精度
		if !(math.IsInf(test.expectCI[0], 0) || floatAlmostEqual(result.CI[0], test.expectCI[0], 1e-4)) ||
			!(math.IsInf(test.expectCI[1], 0) || floatAlmostEqual(result.CI[1], test.expectCI[1], 1e-4)) {
			t.Errorf("case %d: CI mismatch, got [%f, %f], want [%f, %f]", i, result.CI[0], result.CI[1], test.expectCI[0], test.expectCI[1])
		}

		if len(result.EffectSizes) > 0 && !floatAlmostEqual(result.EffectSizes[0].Value, test.expectEffect, 0.01) {
			t.Errorf("case %d: Effect size mismatch, got %f, want %f", i, result.EffectSizes[0].Value, test.expectEffect)
		}
	}
}

func TestTwoSampleZTest(t *testing.T) {
	tests := []twoSampleTestCase{
		{
			data1:  []float64{65.97, 47.63, 57.80, 51.74, 63.65, 60.38, 50.41, 58.52, 58.88, 57.38},
			data2:  []float64{40.76, 43.83, 42.98, 55.62, 61.43, 53.83, 40.01, 51.52, 48.68, 45.75, 38.06, 50.13},
			sigma1: 10, sigma2: 12,
			alternative: stats.TwoSided,
			expectZ:     2.0295, expectP: 0.0424,
			expectCI:     [2]float64{0.3263, 18.7124},
			expectEffect: 0.8549,
		},
		{
			data1:  []float64{48.93, 66.06, 53.40, 55.11, 56.53, 62.99, 54.89, 51.29, 58.49, 53.33, 58.78, 48.63, 62.46, 52.57, 55.71},
			data2:  []float64{40.63, 48.26, 41.43, 42.70, 39.87, 51.94, 44.94, 54.12, 42.10, 49.86, 58.14, 51.30, 38.90, 45.13, 41.72},
			sigma1: 10, sigma2: 12,
			alternative: stats.Greater,
			expectZ:     2.4485, expectP: 0.0072,
			expectCI:     [2]float64{1.9704, math.Inf(1)},
			expectEffect: 0.8941,
		},
		{
			data1:  []float64{55.35, 61.14, 61.00, 53.47, 56.38, 56.06, 50.17, 51.50, 61.04, 63.08, 56.49, 48.32, 48.94, 64.49, 45.36, 51.70, 50.22, 54.16, 51.85, 54.18},
			data2:  []float64{46.89, 53.49, 47.95, 50.52, 48.51, 53.21, 56.18, 43.75, 40.55, 48.88, 42.79, 42.89, 45.74, 51.65, 44.95, 45.33, 45.52, 55.80, 53.03, 48.86, 45.91, 41.34, 48.97, 43.75, 48.46},
			sigma1: 10, sigma2: 12,
			alternative: stats.Less,
			expectZ:     2.1182, expectP: 0.9829,
			expectCI:     [2]float64{-math.Inf(1), 13.3774},
			expectEffect: 0.6229,
		},
		{
			data1:  []float64{53.11, 52.58, 56.17, 54.85, 59.40, 57.34, 55.61, 49.82, 58.10, 48.55, 47.38, 57.07, 52.47, 54.85, 57.63, 57.76, 50.61, 47.55, 48.85, 59.08, 49.53, 51.87, 54.56, 50.96, 58.01, 57.93, 50.88, 58.08, 53.13, 55.87},
			data2:  []float64{48.84, 47.56, 50.28, 53.09, 52.16, 50.62, 55.20, 50.91, 54.53, 51.13, 48.50, 49.15, 51.12, 47.39, 51.50, 46.57, 51.94, 49.06, 54.28, 46.91, 52.21, 52.00, 52.40, 53.57, 49.97, 51.17, 54.51, 45.27, 50.86, 52.99},
			sigma1: 10, sigma2: 12,
			alternative: stats.TwoSided,
			expectZ:     1.0976, expectP: 0.2724,
			expectCI:     [2]float64{-2.4593, 8.7200},
			expectEffect: 0.2834,
		},
		{
			data1:  []float64{52.76, 56.15, 48.13, 53.83, 50.18, 55.23, 56.91, 53.84, 48.77, 47.36, 57.12, 53.36, 52.97, 56.88, 54.53, 56.91, 51.32, 59.32, 48.71, 48.50, 48.92, 55.91, 58.19, 51.46, 56.07, 50.39, 54.62, 52.66, 50.31, 47.35, 48.85, 52.09, 56.33, 53.10, 49.30, 52.14, 51.51, 53.71, 51.13, 50.99, 54.58, 51.71, 51.38, 54.70, 53.77, 47.88, 52.34, 52.48, 49.76, 47.40},
			data2:  []float64{50.23, 44.90, 50.35, 48.84, 43.76, 50.49, 45.73, 44.87, 45.17, 49.49, 45.95, 51.56, 52.34, 48.88, 46.38, 44.51, 45.45, 46.99, 44.50, 42.59, 50.43, 50.29, 48.83, 49.67, 50.35, 44.52, 42.55, 49.12, 48.35, 46.19, 46.42, 43.71, 43.13, 42.74, 42.32, 45.66, 42.39, 49.17, 42.99, 42.57},
			sigma1: 10, sigma2: 12,
			alternative: stats.Greater,
			expectZ:     2.4791, expectP: 0.0066,
			expectCI:     [2]float64{1.2286, math.Inf(1)},
			expectEffect: 0.5365,
		},
	}

	for i, test := range tests {
		dl1 := insyra.NewDataList(test.data1)
		dl2 := insyra.NewDataList(test.data2)
		result := stats.TwoSampleZTest(dl1, dl2, test.sigma1, test.sigma2, test.alternative, 0.95)

		if !floatAlmostEqual(result.Statistic, test.expectZ, 0.01) {
			t.Errorf("Two-sample case %d: Z mismatch, got %f, want %f", i, result.Statistic, test.expectZ)
		}
		if !floatAlmostEqual(result.PValue, test.expectP, 0.01) {
			t.Errorf("Two-sample case %d: P mismatch, got %f, want %f", i, result.PValue, test.expectP)
		}
		if !(math.IsInf(test.expectCI[0], 0) || floatAlmostEqual(result.CI[0], test.expectCI[0], 1e-4)) ||
			!(math.IsInf(test.expectCI[1], 0) || floatAlmostEqual(result.CI[1], test.expectCI[1], 1e-4)) {
			t.Errorf("Two-sample case %d: CI mismatch, got [%f, %f], want [%f, %f]", i, result.CI[0], result.CI[1], test.expectCI[0], test.expectCI[1])
		}
		if len(result.EffectSizes) > 0 && !floatAlmostEqual(result.EffectSizes[0].Value, test.expectEffect, 0.01) {
			t.Errorf("Two-sample case %d: Effect size mismatch, got %f, want %f", i, result.EffectSizes[0].Value, test.expectEffect)
		}
	}
}
